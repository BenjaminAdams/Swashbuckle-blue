{
    "swagger": "2.0",
    "info": {
        "version": "v1",
        "title": "Super Fun Test API - Documention and Examples",
        "description": "<p>The overall goal of the SuperFun team can be divided into three functional areas. These areas are Metrics (Logging), Reporting (via a Dashboard), and a Productized Fun API.</p><ul>    <li><strong>Metrics:</strong> Specific actions can be logged into the database for the current functionality of Business Metrics ($), SLA Metrics (execution times), and RTV Metrics (Real Time Validation).  All new functionality which falls under the SuperFun teamâ€™s prevue will have this functionality backed in.</li>    <li><strong>Reporting:</strong> Data that is logged by the Metrics code will be transformed via a nightly process and replicated to a Reporting Database. This will allow the Logging DB to only deal with writes, while the Reporting DB will only deal with reads. A dashboard user interface has been constructed to display reports for each of the logged metrics. Reports can be customized by specifying specific criteria from a list of drop downs presented.</li>    <li><strong>Productized:</strong> Fun API: The SuperFun team created API endpoints for both new and old functionality for the Fun Gateway. The API is REST based ASP.Net WEBAPI. Externally available endpoints are exposed via DataPower. Standard Authentication/Authorization is used with an API key in the HTTP header. The directive of this API is that a simple payload system to be defined and documented in swagger, and that each endpoint is required only the payload needed to perform its work. Ease of use is very important to this initiative.</li></ul><h1 id=\"gettingStarted\">Getting Started</h1><p>    You will need to register your application with us. Please email <a href='mailto:someTeam@SomeCompany.com'>someTeam@SomeCompany.com</a>.</p><p>    An <b>API key</b> in the header is required for all API calls.</p><h2>Include API Key in HTTP Header</h2><pre><code class=\"html hljs\">YayApikey: 777c83dg5a8992dbbb1f91786a19e8b8</code></pre><h1 id=\"xmlOrJson\">XML or JSON</h1><p>Our endpoints accept JSON or XML as an input, and we can respond with JSON or XML.</p><h2>If you are sending JSON or XML as a payload to us</h2><p>Set the \"Content-Type\" in the header</p><pre><code class=\"js hljs\">//for xml:<br />Content-Type: application/xml<br />//for JSON:<br />Content-Type: application/json</code></pre><h2>If want to receive JSON or XML as a response from us</h2><p>Set the \"Accept\" in the header</p><pre><code class=\"js hljs\">//for xml:<br />Accept: application/xml<br />//for JSON:<br />Accept: application/json</code></pre><h1 id=\"correlationId\">CorrelationId</h1><p>You can add a CorrelationId to the HTTP header and it will get tracked in our logs, which you can see in <a href=\"http://localhost/ohhey\">splunk</a></p><pre><code class=\"html hljs\">CorrelationId: your-id</code></pre>",
        "termsOfService": "Some terms",
        "contact": {
            "name": "Some contact",
            "url": "http://tempuri.org/contact",
            "email": "some.contact@tempuri.org"
        },
        "license": {
            "name": "Some License",
            "url": "http://tempuri.org/license"
        }
    },
    "host": "localhost:3200",
    "basePath": "/Swashbuckle.Dummy.WebHost",
    "schemes": ["http", "https"],
    "paths": {
        "/v1/thisShouldBeIgnored/IgnoreThisPlz": {
            "post": {
                "tags": ["AnnotatedTypes"],
                "operationId": "IgnoreOneParam",
                "consumes": ["application/json", "text/json", "application/xml", "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [{
                    "name": "payment",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.Payment",
                        "ignore": false
                    },
                    "ignore": false
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "ignore": false
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/v3/subscriptions/IgnoreThis": {
            "post": {
                "tags": ["AttributeRoutes"],
                "operationId": "IgnoreThis",
                "consumes": [],
                "produces": [],
                "parameters": [{
                    "name": "ignoreThis",
                    "in": "query",
                    "required": true,
                    "type": "string",
                    "ignore": true
                }],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/v3/subscriptions/{id}/cancel": {
            "post": {
                "tags": ["AttributeRoutes"],
                "operationId": "CancelSubscription",
                "consumes": [],
                "produces": [],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "integer",
                    "format": "int32",
                    "maximum": 9861,
                    "minimum": 0,
                    "example": "777",
                    "ignore": false
                }, {
                    "name": "strWithMaxLen",
                    "in": "query",
                    "required": true,
                    "type": "string",
                    "maxLength": 55,
                    "ignore": false
                }, {
                    "name": "strWithMinLen",
                    "in": "query",
                    "required": true,
                    "type": "string",
                    "minLength": 24,
                    "ignore": false
                }],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/{apiVersion}/todos": {
            "post": {
                "tags": ["MultipleApiVersions"],
                "operationId": "Create",
                "consumes": ["application/json", "text/json", "application/xml", "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [{
                    "name": "description",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "maxLength": 39,
                        "type": "string",
                        "ignore": false,
                        "example": "this is an example description"
                    },
                    "ignore": false
                }, {
                    "name": "anEnumField",
                    "in": "query",
                    "required": true,
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": ["testItem1", "testItem3434", "asdasdasd"],
                        "ignore": false
                    },
                    "collectionFormat": "csv",
                    "enum": ["testItem1", "testItem3434", "asdasdasd"],
                    "example": "testItem1",
                    "ignore": false
                }, {
                    "name": "apiVersion",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "ignore": false
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "format": "int32",
                            "type": "integer",
                            "ignore": false
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/{apiVersion}/todos/{id}": {
            "put": {
                "tags": ["MultipleApiVersions"],
                "operationId": "Update",
                "consumes": ["application/json", "text/json", "application/xml", "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "integer",
                    "format": "int32",
                    "example": "12333",
                    "ignore": false
                }, {
                    "name": "description",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "ignore": false,
                        "example": "this is an example description"
                    },
                    "ignore": false
                }, {
                    "name": "apiVersion",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "ignore": false
                }],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/xmlannotated/filter": {
            "get": {
                "tags": ["XmlAnnotated"],
                "summary": "Filters account based on the given parameters.",
                "operationId": "Filter",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [{
                    "name": "q",
                    "in": "query",
                    "description": "The search query on which to filter accounts",
                    "required": true,
                    "type": "string",
                    "example": "123",
                    "ignore": false
                }, {
                    "name": "page.limit",
                    "in": "query",
                    "description": "The maximum number of accounts to return",
                    "required": false,
                    "requiredConditionally": false,
                    "type": "integer",
                    "format": "int32",
                    "example": "50",
                    "ignore": false
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.Account",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/xmlannotated/{id}/add-reward": {
            "put": {
                "tags": ["XmlAnnotated"],
                "summary": "Adds a reward to an existing account",
                "operationId": "ReallyLongMethodNameRightHereYallWhyDoPeopleDoThis",
                "consumes": ["application/json", "text/json", "application/xml", "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "type": "integer",
                    "format": "int32",
                    "example": "42A30F91-D786-4582-A20D-9644D9F28291",
                    "ignore": false
                }, {
                    "name": "reward",
                    "in": "body",
                    "description": "",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.Reward[System.String]",
                        "ignore": false
                    },
                    "ignore": false
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.SoMuch",
                            "ignore": false
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/xmlannotated/yayxx": {
            "post": {
                "tags": ["XmlAnnotated"],
                "summary": "So much funs! .So we can verify an array schema serializes properly",
                "operationId": "AddFunsxx",
                "consumes": ["application/json", "text/json", "application/xml", "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [{
                    "name": "soMuch",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.SoMuch",
                        "ignore": false
                    },
                    "ignore": false
                }],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.SoMuch",
                            "ignore": false
                        }
                    },
                    "201": {
                        "description": "Created"
                    },
                    "202": {
                        "description": "Accepted"
                    },
                    "300": {
                        "description": "MultipleChoices"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "505": {
                        "description": "HttpVersionNotSupported"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/v1/xmlannotated/CustomRouteTest": {
            "post": {
                "tags": ["XmlAnnotated"],
                "summary": "Testing [SwaggerCustomRoute] attribute",
                "operationId": "YayRenameWorked",
                "consumes": ["application/json", "text/json", "application/xml", "text/xml",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [],
                "parameters": [{
                    "name": "soMuch",
                    "in": "body",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.SoMuch",
                        "ignore": false
                    },
                    "ignore": false
                }],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/System.Object",
                                "ignore": false
                            },
                            "ignore": false
                        }
                    }
                },
                "deprecated": false
            }
        }
    },
    "definitions": {
        "Swashbuckle.Dummy.Controllers.Payment": {
            "required": ["amount", "cardNumber", "expMonth", "expYear"],
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number",
                    "ignore": false
                },
                "swaggerIgnoredParam": {
                    "type": "string",
                    "ignore": false
                },
                "cardNumber": {
                    "pattern": "^[3-6]?\\d{12,15}$",
                    "type": "string",
                    "ignore": false
                },
                "expMonth": {
                    "format": "int32",
                    "maximum": 12,
                    "minimum": 1,
                    "type": "integer",
                    "ignore": false
                },
                "expYear": {
                    "format": "int32",
                    "maximum": 99,
                    "minimum": 14,
                    "type": "integer",
                    "ignore": false
                },
                "note": {
                    "maxLength": 500,
                    "minLength": 10,
                    "type": "string",
                    "ignore": false
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "System.Object": {
            "type": "object",
            "properties": {},
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.Page": {
            "type": "object",
            "properties": {
                "limit": {
                    "format": "int32",
                    "description": "The maximum number of accounts to return",
                    "type": "integer",
                    "ignore": false,
                    "example": "50"
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.Account": {
            "description": "Account details",
            "required": ["stupdSexyFlanders"],
            "type": "object",
            "properties": {
                "accountID": {
                    "format": "int32",
                    "description": "Really long SwaggerExample test",
                    "type": "integer",
                    "ignore": false,
                    "example": "abc12333333"
                },
                "stupdSexyFlanders": {
                    "description": "a random guid",
                    "type": "string",
                    "ignore": false,
                    "example": "E7A8FF34-4E18-4841-982C-FD862947DB50"
                },
                "username": {
                    "description": "Really long SwaggerExample test",
                    "type": "string",
                    "ignore": false,
                    "example": "abc12333333xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                },
                "password": {
                    "description": "For authentication",
                    "type": "string",
                    "ignore": false,
                    "example": "my secret pw"
                },
                "preferences": {
                    "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.Account.AccountPreferences",
                    "ignore": false
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.Account.AccountPreferences": {
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "Provide a display name to use instead of Username when signed in",
                    "type": "string",
                    "ignore": false,
                    "example": "Benjamin"
                },
                "allow-marketing-emails": {
                    "description": "Flag to indicate if marketing emails may be sent",
                    "type": "string",
                    "ignore": false,
                    "example": "Hey its a working example guy"
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.Reward[System.String]": {
            "description": "A redeemable reward",
            "type": "object",
            "properties": {
                "value": {
                    "format": "double",
                    "type": "number",
                    "ignore": false
                },
                "rewardType": {
                    "description": "The reward type",
                    "type": "string",
                    "ignore": false,
                    "example": "some kinda type"
                },
                "guidTest": {
                    "type": "string",
                    "ignore": false,
                    "example": "42C41233-2686-4720-A61F-E48BF3167094"
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.SoMuch": {
            "description": "SoMuch bro",
            "required": ["funs", "listWithSomeGuidsInside"],
            "requiredConditionally": ["eumTest"],
            "type": "object",
            "properties": {
                "funs": {
                    "description": "An array of funs!",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.CoolThings",
                        "ignore": false
                    },
                    "ignore": false
                },
                "nestedObjTest": {
                    "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.SubAccount",
                    "ignore": false
                },
                "eumTest": {
                    "enum": ["Ziggy", "Mouse"],
                    "type": "string",
                    "ignore": false,
                    "example": "Ziggy"
                },
                "eumTestList": {
                    "type": "array",
                    "items": {
                        "enum": ["Ziggy", "Mouse"],
                        "type": "string",
                        "ignore": false,
                        "example": "Ziggy"
                    },
                    "ignore": false
                },
                "listWithSomeGuidsInside": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.TestListStuff",
                        "ignore": false
                    },
                    "ignore": false
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.CoolThings": {
            "description": "Cool things we can do!",
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The Id of the thing",
                    "type": "integer",
                    "ignore": false,
                    "example": "123123"
                },
                "name": {
                    "description": "The name of the cool thing we did",
                    "type": "string",
                    "ignore": false,
                    "example": "Kayaking"
                },
                "swaggerExampleNullTest": {
                    "description": "This is a test to see if [SwaggerExample(\"null\")] will make the field null in the example payload",
                    "type": "string",
                    "ignore": false,
                    "example": "NULL"
                },
                "country": {
                    "type": "string",
                    "ignore": false,
                    "example": "US"
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.SubAccount": {
            "description": "A Sub-Type of Account",
            "required": ["thisIsRequired", "stupdSexyFlanders"],
            "type": "object",
            "properties": {
                "accountID": {
                    "format": "int32",
                    "description": "The Account ID for SubAccounts should be 7 digits.",
                    "maximum": 3,
                    "minimum": 0,
                    "type": "integer",
                    "ignore": false,
                    "example": "1974480479"
                },
                "thisIsRequired": {
                    "type": "string",
                    "ignore": false
                },
                "stupdSexyFlanders": {
                    "description": "a random guid",
                    "type": "string",
                    "ignore": false,
                    "example": "8F50A4F2-8832-4B79-9947-8387125B0CC6"
                },
                "username": {
                    "description": "Really long SwaggerExample test",
                    "type": "string",
                    "ignore": false,
                    "example": "abc12333333xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                },
                "password": {
                    "description": "For authentication",
                    "type": "string",
                    "ignore": false,
                    "example": "my secret pw"
                },
                "preferences": {
                    "$ref": "#/definitions/Swashbuckle.Dummy.Controllers.Account.AccountPreferences",
                    "ignore": false
                }
            },
            "ignore": false,
            "x-schema": "bar"
        },
        "Swashbuckle.Dummy.Controllers.TestListStuff": {
            "required": ["amount", "fulfillmentId"],
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "description": "The Amount to charge the customer.  Must be greater than zero",
                    "type": "number",
                    "ignore": false,
                    "example": "0.01"
                },
                "fulfillmentId": {
                    "description": "Identifies a location where the goods or services are coming from",
                    "type": "string",
                    "ignore": false,
                    "example": "EE8A48AD-A185-441A-A5BB-B7EA36CB792E"
                }
            },
            "ignore": false,
            "x-schema": "bar"
        }
    },
    "x-document": "foo"
}